"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const procExecRegExp_1 = require("./procExecRegExp");
const procedure_1 = require("./procedure");
const uniqueId_1 = require("./uniqueId");
describe('procExecRegExp', () => {
    test('basic', () => {
        const req = (0, procExecRegExp_1.createRequestExecRegExp)({ text: 'two words', regexp: /w\w+/g });
        const result = (0, procExecRegExp_1.procExecRegExp)(req);
        expect((0, procExecRegExp_1.isExecRegExpResponse)(result)).toBe(true);
        const response = (0, procExecRegExp_1.isExecRegExpResponse)(result) ? result : undefined;
        expect(response === null || response === void 0 ? void 0 : response.data.elapsedTimeMs).toBeGreaterThan(0);
        expect(response === null || response === void 0 ? void 0 : response.data.matches).toHaveLength(2);
        expect(response === null || response === void 0 ? void 0 : response.data.matches.map((m) => m[0])).toEqual(['wo', 'words']);
    });
    test('non-RequestExecRegExp', () => {
        const req = { id: (0, uniqueId_1.createId)(), requestType: 'unknown', data: { text: 'two words', regexp: /w\w+/g } };
        const result = (0, procExecRegExp_1.procExecRegExp)(req);
        expect((0, procExecRegExp_1.isExecRegExpResponse)(result)).toBe(false);
        expect(result).toBeUndefined();
    });
    test('RequestExecRegExp bad regex', () => {
        const req = (0, procedure_1.createRequest)(procExecRegExp_1.requestTypeExecRegExp, { text: 'two words', regexp: '/[/g' });
        const result = (0, procExecRegExp_1.procExecRegExp)(req);
        const response = (0, procedure_1.isErrorResponse)(result) ? result : undefined;
        expect((0, procExecRegExp_1.isExecRegExpResponse)(result)).toBe(false);
        expect((0, procedure_1.isErrorResponse)(result)).toBe(true);
        expect(response === null || response === void 0 ? void 0 : response.id).toBe(req.id);
        expect(response === null || response === void 0 ? void 0 : response.data.requestType).toBe(procExecRegExp_1.requestTypeExecRegExp);
        expect(response === null || response === void 0 ? void 0 : response.data.message).toContain('SyntaxError');
    });
    test('RequestExecRegExp missing regex', () => {
        const req = (0, procedure_1.createRequest)(procExecRegExp_1.requestTypeExecRegExp, { text: 'two words', regexp: '' });
        delete req.data.regexp;
        const result = (0, procExecRegExp_1.procExecRegExp)(req);
        const response = (0, procedure_1.isErrorResponse)(result) ? result : undefined;
        expect(response === null || response === void 0 ? void 0 : response.id).toBe(req.id);
        expect(response === null || response === void 0 ? void 0 : response.data.message).toContain('TypeError');
    });
    test('RequestExecRegExp missing data', () => {
        const req = (0, procedure_1.createRequest)(procExecRegExp_1.requestTypeExecRegExp, { text: 'two words', regexp: '/./g' });
        delete req.data;
        const result = (0, procExecRegExp_1.procExecRegExp)(req);
        const response = (0, procedure_1.isErrorResponse)(result) ? result : undefined;
        expect(response === null || response === void 0 ? void 0 : response.id).toBe(req.id);
        expect(response === null || response === void 0 ? void 0 : response.data.message).toContain('TypeError');
    });
    test('RequestExecRegExp data is a number', () => {
        const req = (0, procedure_1.createRequest)(procExecRegExp_1.requestTypeExecRegExp, { text: 'two words', regexp: '/./g' });
        Object.assign(req, { data: 42 });
        const result = (0, procExecRegExp_1.procExecRegExp)(req);
        const response = (0, procedure_1.isErrorResponse)(result) ? result : undefined;
        expect(response === null || response === void 0 ? void 0 : response.id).toBe(req.id);
        expect(response === null || response === void 0 ? void 0 : response.data.message).toContain('TypeError');
    });
});
//# sourceMappingURL=procExecRegExp.test.js.map