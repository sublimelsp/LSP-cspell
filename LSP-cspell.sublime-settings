{
    "settings": {
        // Enable / Disable allowing word compounds. `true` means `arraylength` would be ok, `false`
        // means it would not pass.
        "cSpell.allowCompoundWords": false,
        // Control which file schemas will be checked for spelling (VS Code must be restarted for
        // this setting to take effect).
        "cSpell.allowedSchemas": [
            "file",
            "gist",
            "sftp",
            "untitled",
            "vscode-notebook-cell"
        ],
        // The maximum average length of chunks of text without word breaks.
        // A chunk is the characters between absolute word breaks.
        // Absolute word breaks match: `/[\s,{}[\]]/`
        // **Error Message:** _Average Word Size is Too High._
        // If you are seeing this message, it means that the file contains mostly long lines
        // without many word breaks.
        "cSpell.blockCheckingWhenAverageChunkSizeGreatherThan": 80,
        // The maximum line length.
        // Block spell checking if lines are longer than the value given.
        // This is used to prevent spell checking generated files.
        // **Error Message:** _Lines are too long._
        "cSpell.blockCheckingWhenLineLengthGreaterThan": 10000,
        // The maximum length of a chunk of text without word breaks.
        // It is used to prevent spell checking of generated files.
        // A chunk is the characters between absolute word breaks.
        // Absolute word breaks match: `/[\s,{}[\]]/`, i.e. spaces or braces.
        // **Error Message:** _Maximum Word Length is Too High._
        // If you are seeing this message, it means that the file contains a very long line
        // without many word breaks.
        "cSpell.blockCheckingWhenTextChunkSizeGreaterThan": 500,
        // Determines if words must match case and accent rules.
        // - `false` - Case is ignored and accents can be missing on the entire word.   Incorrect
        // accents or partially missing accents will be marked as incorrect.
        // - `true` - Case and accents are enforced.
        "cSpell.caseSensitive": false,
        // The limit in K-Characters to be checked in a file.
        "cSpell.checkLimit": 500,
        // Define custom dictionaries to be included by default.
        // If `addWords` is `true` words will be added to this dictionary.
        // **Example:**
        // ```js
        // "cSpell.customDictionaries": {
        //   "project-words": {
        //     "name": "project-words",
        //     "path": "${workspaceRoot}/project-words.txt",
        //     "description": "Words used in this project",
        //     "addWords": true
        //   },
        //   "custom": true, // Enable the `custom` dictionary
        //   "internal-terms": false // Disable the `internal-terms` dictionary
        // }
        // ```
        "cSpell.customDictionaries": {},
        // Define custom dictionaries to be included by default for the folder.
        // If `addWords` is `true` words will be added to this dictionary.
        "cSpell.customFolderDictionaries": [],
        // Define custom dictionaries to be included by default for the user.
        // If `addWords` is `true` words will be added to this dictionary.
        "cSpell.customUserDictionaries": [],
        // Define custom dictionaries to be included by default for the workspace.
        // If `addWords` is `true` words will be added to this dictionary.
        "cSpell.customWorkspaceDictionaries": [],
        // Issues found by the spell checker are marked with a Diagnostic Severity Level. This
        // affects the color of squiggle.
        // possible values: Error, Warning, Information, Hint
        "cSpell.diagnosticLevel": "Information",
        // Optional list of dictionaries to use. Each entry should match the name of the dictionary.
        // To remove a dictionary from the list add `!` before the name. i.e. `!typescript` will
        // turn off the dictionary with the name `typescript`.
        "cSpell.dictionaries": [],
        // Define additional available dictionaries
        "cSpell.dictionaryDefinitions": [],
        // Enable / Disable checking file types (languageIds).
        // These are in additional to the file types specified by `cSpell.enabledLanguageIds`.
        // To disable a language, prefix with `!` as in `!json`,
        // Example:
        // ```
        // jsonc       // enable checking for jsonc
        // !json       // disable checking for json
        // kotlin      // enable checking for kotlin
        // ```
        "cSpell.enableFiletypes": [],
        // Enable / Disable the spell checker.
        "cSpell.enabled": true,
        // Specify file types to spell check. Use `cSpell.enableFiletypes` to Enable / Disable
        // checking files types.
        "cSpell.enabledLanguageIds": [
            "asciidoc",
            "c",
            "cpp",
            "csharp",
            "css",
            "git-commit",
            "go",
            "graphql",
            "handlebars",
            "haskell",
            "html",
            "jade",
            "java",
            "javascript",
            "javascriptreact",
            "json",
            "jsonc",
            "jupyter",
            "latex",
            "less",
            "markdown",
            "php",
            "plaintext",
            "python",
            "pug",
            "restructuredtext",
            "rust",
            "scala",
            "scss",
            "swift",
            "text",
            "typescript",
            "typescriptreact",
            "vue",
            "yaml",
            "yml"
        ],
        // Show Regular Expression Explorer
        "cSpell.experimental.enableRegexpView": false,
        // Glob patterns of files to be checked. Glob patterns are relative to the `globRoot` of the
        // configuration file that defines them.
        "cSpell.files": [],
        // Use Rename when fixing spelling issues.
        "cSpell.fixSpellingWithRenameProvider": true,
        // list of words to always be considered incorrect.
        "cSpell.flagWords": [],
        // The root to use for glop patterns found in this configuration. Default: The current
        // workspace folder. Use `globRoot` to define a different location. `globRoot` can be
        // relative to the location of this configuration file. Defining globRoot, does not impact
        // imported configurations.
        // Special Values:
        // - `${workspaceFolder}` - Default - globs will be relative to the current workspace
        // folder\n
        // - `${workspaceFolder:<name>}` - Where `<name>` is the name of the workspace folder.
        "cSpell.globRoot": "",
        // Glob patterns of files to be ignored. The patterns are relative to the `globRoot` of the
        // configuration file that defines them.
        "cSpell.ignorePaths": [
            "package-lock.json",
            "node_modules",
            "vscode-extension",
            ".git/objects",
            ".vscode",
            ".vscode-insiders"
        ],
        // List of RegExp patterns or Pattern names to exclude from spell checking.
        // Example: ["href"] - to exclude html href
        "cSpell.ignoreRegExpList": [],
        // A list of words to be ignored by the spell checker.
        "cSpell.ignoreWords": [],
        // Other settings files to be included
        "cSpell.import": [],
        // List of RegExp patterns or defined Pattern names to define the text to be included for
        // spell checking. If includeRegExpList is defined, ONLY, text matching the included
        // patterns will be checked.
        "cSpell.includeRegExpList": [],
        // Current active spelling language.
        // Example: "en-GB" for British English
        // Example: "en,nl" to enable both English and Dutch
        "cSpell.language": "en",
        // Additional settings for individual languages.
        "cSpell.languageSettings": [],
        // Set the Debug Level for logging messages.
        // possible values: None, Error, Warning, Information, Debug
        "cSpell.logLevel": "Error",
        // The maximum number of times the same word can be flagged as an error in a file.
        "cSpell.maxDuplicateProblems": 5,
        // Controls the maximum number of spelling errors per document.
        "cSpell.maxNumberOfProblems": 100,
        // The minimum length of a word before checking it against a dictionary.
        "cSpell.minWordLength": 4,
        // Prevents searching for local configuration when checking individual documents.
        "cSpell.noConfigSearch": false,
        // Optional list of dictionaries that will not be used for suggestions. Words in these
        // dictionaries are considered correct, but will not be used when making spell correction
        // suggestions.
        // Note: if a word is suggested by another dictionary, but found in one of these
        // dictionaries, it will be removed from the set of possible suggestions.
        "cSpell.noSuggestDictionaries": [],
        // Controls the number of suggestions shown.
        "cSpell.numSuggestions": 8,
        // Overrides to apply based upon the file path.
        "cSpell.overrides": [],
        // Defines a list of patterns that can be used in ignoreRegExpList and includeRegExpList
        "cSpell.patterns": [],
        // Show CSpell in-document directives as you type.
        "cSpell.showAutocompleteSuggestions": false,
        // Show Spell Checker actions in Editor Context Menu
        "cSpell.showCommandsInEditorContextMenu": true,
        // Display the spell checker status on the status bar.
        "cSpell.showStatus": true,
        // The side of the status bar to display the spell checker status.
        // possible values: Left, Right
        "cSpell.showStatusAlignment": "Right",
        // Delay in ms after a document has changed before checking it for spelling errors.
        "cSpell.spellCheckDelayMs": 50,
        // Only spell check files that are in the currently open workspace.
        // This same effect can be achieved using the `files` setting.
        // ```
        // "cSpell.files": ["**", "**​/.*", "**​/.*​/**"]
        // ```
        "cSpell.spellCheckOnlyWorkspaceFiles": false,
        // The type of menu used to display spelling suggestions.
        // possible values: quickPick, quickFix
        "cSpell.suggestionMenuType": "quickPick",
        // The maximum number of changes allowed on a word to be considered a suggestions.
        // For example, appending an `s` onto `example` -> `examples` is considered 1 change.
        // Range: between 1 and 5.
        "cSpell.suggestionNumChanges": 3,
        // The maximum amount of time in milliseconds to generate suggestions for a word.
        "cSpell.suggestionsTimeout": 400,
        // Tells the spell checker to load `.gitignore` files and skip files that match the globs in
        // the `.gitignore` files found.
        "cSpell.useGitignore": true,
        // Packages managers like Yarn 2 use a `.pnp.cjs` file to assist in loading packages stored
        // in the repository.
        // When true, the spell checker will search up the directory structure for the existence of
        // a PnP file and load it.
        "cSpell.usePnP": false,
        // Words to add to global dictionary -- should only be in the user config file.
        "cSpell.userWords": [],
        // list of words to be always considered correct
        "cSpell.words": [],
        // Define the path to the workspace root folder in a multi-root workspace.
        // By default it is the first folder.
        // This is used to find the `cspell.json` file for the workspace.
        // Example: use the `client` folder
        // ```
        // ${workspaceFolder:client}
        // ```
        "cSpell.workspaceRootPath": "",
    },
    // ST4
    "selector": "source.jsx | source.js.react | source.js | source.tsx | source.ts | source.css | source.scss | source.less | text.html.vue | text.html.svelte | text.html.basic | text.html.twig | text.blade | embedding.php | source.python",
    // ST3
    "languages": [
        {
            "languageId": "html",
            "scopes": ["text.html.basic", "embedding.php", "text.blade", "text.html.twig"],
            "syntaxes": [
                "Packages/HTML/HTML.sublime-syntax",
                "Packages/PHP/PHP.sublime-syntax",
                "Packages/PHP/PHP.sublime-syntax",
                "Packages/Laravel Blade Highlighter/blade.sublime-syntax",
                "Packages/Twig/resources/syntax/Twig.sublime-syntax"
            ]
        },
        {
            "languageId": "javascriptreact",
            "scopes": ["source.jsx", "source.js.react"],
            "syntaxes": [
                "Packages/User/JS Custom/Syntaxes/React.sublime-syntax",
            ],
        },
        {
            "languageId": "javascript",
            "scopes": ["source.js"],
            "syntaxes": [
                "Packages/JavaScript/JavaScript.sublime-syntax",
                "Packages/Babel/JavaScript (Babel).sublime-syntax"
            ]
        },
        {
            "languageId": "css",
            "scopes": ["source.css"],
            "syntaxes": [
                "Packages/CSS/CSS.sublime-syntax",
                "Packages/CSS3/CSS3.sublime-syntax"
            ]
        },
        {
            "languageId": "typescriptreact",
            "scopes": ["source.tsx"],
            "syntaxes": [
                "Packages/TypeScript Syntax/TypeScriptReact.tmLanguage",
            ],
        },
        {
            "languageId": "typescript",
            "scopes": ["source.ts"],
            "syntaxes": [
                "Packages/TypeScript Syntax/TypeScript.tmLanguage",
            ],
        },
        {
            "languageId": "scss",
            "scopes": ["source.scss"],
            "syntaxes": ["Packages/Sass/Syntaxes/SCSS.sublime-syntax"]
        },
        {
            "languageId": "less",
            "scopes": ["source.less"],
            "syntaxes": ["Packages/LESS/Syntaxes/LESS.sublime-syntax"]
        },
        {
            "languageId": "vue",
            "scopes": ["text.html.vue"],
            "syntaxes": ["Packages/Vue Syntax Highlight/Vue Component.sublime-syntax"]
        },
        {
            "languageId": "svelte",
            "scopes": ["text.html.svelte"],
            "syntaxes": ["Packages/Svelte/Svelte.sublime-syntax"]
        }
    ]
}
